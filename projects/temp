<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Brawl Chess - Blog</title>
    <link rel="stylesheet" href="../css/styles.css" />
    <link rel="stylesheet" href="../css/blog.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.28.0/themes/prism-tomorrow.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
</head>

<body>
    <nav class="navbar navbar-expand-lg fixed-top" data-bs-theme="light">
        <div class="container">
            <a class="navbar-brand d-flex align-items-center" href="../index.html#header" aria-label="Accueil">
                <img src="../images/avatar.jpg" width="40" height="40" alt="Avatar Basil L'H√¥te"
                    class="rounded-circle me-2">
                <span class="d-none d-md-inline">Basil L'H√îTE</span>
            </a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item"><a class="nav-link" href="../index.html#about">√Ä propos</a></li>
                    <li class="nav-item"><a class="nav-link" href="../index.html#portfolio">Portfolio</a></li>
                    <li class="nav-item"><a class="nav-link" href="../index.html#skills">Comp√©tences</a></li>
                    <li class="nav-item"><a class="nav-link" href="../index.html#contact">Contact</a></li>

                    <li class="nav-item">
                        <button id="theme-toggle" class="btn btn-sm btn-outline-secondary ms-2"
                            aria-label="Changer le th√®me">
                            <i class="fas fa-moon"></i>
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container py-5">
        <h1 class="text-center mb-4 mt-4">Brawl Chess</h1>
        <p class="text-center text-muted mb-5">Un jeu mobile en 2d d√©velopp√© avec Love2d. Suivez ici son √©volution
            technique et cr√©ative.</p>

        <div class="text-center mt-5 mb-5">
            <a href="https://github.com/LBasil/Brawl-Chess" target="_blank" class="btn btn-outline-secondary">‚Üê Lien
                vers le projet</a>
        </div>

        <article class="mb-5 p-4 border rounded shadow-sm">
            <div class="blog-header d-flex justify-content-between align-items-center">
                <h3 class="h5">üìö Documentation Compl√®te : Brawl Chess</h3>
                <button class="btn btn-link toggle-content">
                    <i class="fa fa-chevron-down"></i>
                </button>
            </div>
            <p class="text-muted small">Publi√© le 09 mai 2025</p>

            <div class="blog-content" style="display: none;">
                <p>
                    Cette documentation couvre chaque aspect du projet Brawl Chess, un jeu tactique tour par tour d√©velopp√© avec un client Love2D (Lua) et un serveur Java. Elle d√©taille le code Lua, le serveur Java, et l‚Äôarchitecture globale pour faciliter la maintenance et la compr√©hension.
                </p>

                <h3 class="h5 mb-3">Aper√ßu G√©n√©ral üåç</h3>
                <p>
                    Brawl Chess est un jeu o√π deux camps (joueur et ennemi) s‚Äôaffrontent sur un plateau 8x8. Les pions (Sniper, Tourelle, etc.) ont des mouvements et actions uniques. Le client Love2D g√®re l‚Äôinterface et les interactions, tandis que le serveur Java valide les r√®gles et maintient l‚Äô√©tat du jeu.
                </p>
                <ul>
                    <li><strong>Client (Lua)</strong>: Affiche le plateau, g√®re les clics, envoie des requ√™tes TCP au serveur.</li>
                    <li><strong>Serveur (Java)</strong>: Charge les pions depuis <code>pions.txt</code>, valide les mouvements et actions, g√®re les tours.</li>
                    <li><strong>Communication</strong>: Le client envoie des JSON (ex. <code>{type="move", piece={...}}</code>) au serveur, qui r√©pond avec des JSON (ex. <code>{success=true}</code>).</li>
                </ul>
                <p>Exemple de flux : Le joueur clique pour d√©placer un Sniper ‚Üí Lua envoie une requ√™te ‚Üí Java valide via <code>PieceRules</code> ‚Üí Le serveur r√©pond ‚Üí Lua met √† jour le plateau.</p>

                <h3 class="h5 mb-3">Documentation Lua : combat.lua üóÉÔ∏è</h3>
                <h4 class="h6 mb-2">Variables Globales</h4>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Nom</th>
                            <th scope="col">Description</th>
                            <th scope="col">D√©tails/Exemple</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>board</code></td>
                            <td>Tableau 2D pour le plateau 8x8.</td>
                            <td>Stocke les pions ou <code>nil</code>. Ex: <code>board[1][1] = {name="Sniper", hp=3}</code>.</td>
                        </tr>
                        <tr>
                            <td><code>boardSize</code></td>
                            <td>Taille du plateau (8).</td>
                            <td>D√©finit les dimensions. Ex: <code>for i = 1, boardSize do</code>.</td>
                        </tr>
                        <tr>
                            <td><code>tileSize</code></td>
                            <td>Taille d‚Äôune case (50 pixels).</td>
                            <td>Pour dessiner et convertir les clics. Ex: <code>boardCol = math.floor((x - boardX) / tileSize) + 1</code>.</td>
                        </tr>
                        <tr>
                            <td><code>boardX</code>, <code>boardY</code></td>
                            <td>Position du plateau √† l‚Äô√©cran.</td>
                            <td>Coordonn√©es en pixels pour centrer le plateau. Ex: <code>boardX = 100</code>.</td>
                        </tr>
                        <tr>
                            <td><code>playerPieces</code></td>
                            <td>Liste des pions du joueur.</td>
                            <td>Contient <code>name</code>, <code>x</code>, <code>y</code>, <code>hp</code>. Ex: <code>{name="Sniper", x=1, y=1, hp=3}</code>.</td>
                        </tr>
                        <tr>
                            <td><code>enemyPieces</code></td>
                            <td>Liste des pions ennemis.</td>
                            <td>Similaire √† <code>playerPieces</code>. Ex: <code>{name="Soldat", x=1, y=8, hp=2}</code>.</td>
                        </tr>
                        <tr>
                            <td><code>selectedPiece</code></td>
                            <td>Pion s√©lectionn√©.</td>
                            <td><code>nil</code> ou infos du pion. Ex: <code>selectedPiece = {name="Sniper", x=1, y=1}</code>.</td>
                        </tr>
                        <tr>
                            <td><code>actionMode</code></td>
                            <td>Mode d‚Äôaction actif.</td>
                            <td>Ex: <code>"attack"</code> pour Sniper, <code>nil</code> sinon. Ex: <code>actionMode = "attack"</code>.</td>
                        </tr>
                        <tr>
                            <td><code>currentTurn</code></td>
                            <td>Tour actuel ("player"/"enemy").</td>
                            <td>Bloque les actions. Ex: <code>if currentTurn ~= "player" then errorMessage = "Ce n'est pas votre tour !" end</code>.</td>
                        </tr>
                        <tr>
                            <td><code>enemyTurnTimer</code></td>
                            <td>Timer pour le tour ennemi (1s).</td>
                            <td>D√©compte pour repasser au joueur. Ex: <code>enemyTurnTimer = 1</code>.</td>
                        </tr>
                        <tr>
                            <td><code>enemyTurnDuration</code></td>
                            <td>Dur√©e fixe du tour ennemi (1s).</td>
                            <td>Constante pour le timer. Ex: <code>enemyTurnDuration = 1</code>.</td>
                        </tr>
                        <tr>
                            <td><code>errorMessage</code></td>
                            <td>Message d‚Äôerreur affich√©.</td>
                            <td>Ex: <code>"D√©placement invalide"</code>. Ex: <code>errorMessage = response.error</code>.</td>
                        </tr>
                        <tr>
                            <td><code>client</code></td>
                            <td>Objet de connexion TCP.</td>
                            <td>G√®re la communication avec le serveur. Ex: <code>client = socket.tcp()</code>.</td>
                        </tr>
                    </tbody>
                </table>

                <h4 class="h6 mb-2">Fonctions Principales</h4>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Nom</th>
                            <th scope="col">Description</th>
                            <th scope="col">D√©tails/Exemple</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>combat.load()</code></td>
                            <td>Initialise le plateau vide.</td>
                            <td>Cr√©e un tableau 8x8 avec <code>nil</code>. Ex: <pre><code>for i = 1, boardSize do board[i] = {} end</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.enterCombat()</code></td>
                            <td>Connecte au serveur et charge les pions.</td>
                            <td>Envoie une requ√™te vide, remplit <code>playerPieces</code> et <code>enemyPieces</code>. Ex: <pre><code>table.insert(playerPieces, piece)</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.sendMove(piece, targetX, targetY)</code></td>
                            <td>Envoie une requ√™te de d√©placement.</td>
                            <td>JSON avec <code>type="move"</code>, met √† jour si <code>success</code>. Ex: <pre><code>local request = { type = "move", piece = {...} }</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.sendAction(piece, action, targetX, targetY)</code></td>
                            <td>Envoie une requ√™te d‚Äôaction.</td>
                            <td>G√®re <code>attack</code>, <code>shield</code>. Ex: <pre><code>if response.success then targetPiece.hp = targetPiece.hp - 1 end</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.sendEndEnemyTurn()</code></td>
                            <td>Termine le tour ennemi.</td>
                            <td>Envoie <code>{type="endEnemyTurn"}</code>. Ex: <pre><code>client:send(json.encode(request) .. "\n")</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.update(dt)</code></td>
                            <td>Mise √† jour en temps r√©el.</td>
                            <td>D√©compte <code>enemyTurnTimer</code>. Ex: <pre><code>enemyTurnTimer = enemyTurnTimer - dt</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.draw()</code></td>
                            <td>Dessine le plateau et les pions.</td>
                            <td>Utilise <code>love.graphics</code>. Ex: <pre><code>love.graphics.rectangle("fill", ...)</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.mousepressed(x, y, button)</code></td>
                            <td>G√®re les clics.</td>
                            <td>Clic gauche : d√©placer, clic droit : action. Ex: <pre><code>if button == 1 then combat.sendMove(...)</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.mousemoved(x, y)</code></td>
                            <td>Suit la souris pour surligner les cases.</td>
                            <td>Mise √† jour de la case active. Ex: <pre><code>activeCol = math.floor((x - boardX) / tileSize) + 1</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>combat.keypressed(key)</code></td>
                            <td>G√®re les touches.</td>
                            <td>Ex: <code>escape</code> pour quitter. Ex: <pre><code>if key == "escape" then love.event.quit() end</code></pre></td>
                        </tr>
                    </tbody>
                </table>

                <h3 class="h5 mb-3">Documentation Java : Serveur ‚öôÔ∏è</h3>
                <h4 class="h6 mb-2">Classes et M√©thodes</h4>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Nom</th>
                            <th scope="col">Description</th>
                            <th scope="col">D√©tails/Exemple</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>GameServer</code></td>
                            <td>G√®re les connexions et requ√™tes.</td>
                            <td>√âcoute sur un port (ex. 12345), traite les JSON. Ex: <pre><code>ServerSocket serverSocket = new ServerSocket(12345);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>GameServer.handleClient(clientSocket)</code></td>
                            <td>Traite les requ√™tes d‚Äôun client.</td>
                            <td>Lit les JSON, appelle <code>updateGameState</code>. Ex: <pre><code>JSONObject request = new JSONObject(line);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>GameServer.updateGameState(request)</code></td>
                            <td>Met √† jour l‚Äô√©tat du jeu.</td>
                            <td>G√®re <code>move</code>, <code>action</code>, <code>endEnemyTurn</code>. Ex: <pre><code>if (request.getString("type").equals("move")) { ... }</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>Board</code></td>
                            <td>Repr√©sente le plateau 8x8.</td>
                            <td>Stocke les pions dans un tableau. Ex: <pre><code>private String[][] board;</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>Board.isValidMove(pieceName, currentX, currentY, targetX, targetY)</code></td>
                            <td>V√©rifie un d√©placement.</td>
                            <td>Appelle <code>PieceRules</code>. Ex: <pre><code>return pieceRules.isValidMove(...);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>ActionHandler</code></td>
                            <td>G√®re les actions des pions.</td>
                            <td>Traite <code>attack</code>, <code>shield</code>. Ex: <pre><code>return pieceRules.handleAction(...);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>PieceRules</code></td>
                            <td>Interface pour les r√®gles des pions.</td>
                            <td>D√©finit <code>isValidMove</code> et <code>handleAction</code>. Ex: <pre><code>boolean isValidMove(...);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>PieceRulesFactory</code></td>
                            <td>Cr√©e les r√®gles selon le type de pion.</td>
                            <td>Retourne une instance de <code>PieceRules</code>. Ex: <pre><code>PieceRules rules = PieceRulesFactory.getRules(pieceName);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>TurnManager</code></td>
                            <td>G√®re les tours.</td>
                            <td>Alterne entre "player" et "enemy". Ex: <pre><code>currentTurn = currentTurn.equals("player") ? "enemy" : "player";</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>GameState</code></td>
                            <td>Stocke l‚Äô√©tat global.</td>
                            <td>G√®re les pions et leurs stats. Ex: <pre><code>private List<JSONObject> pieces;</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>GameState.findPiece(pieceName, x, y)</code></td>
                            <td>Trouve un pion.</td>
                            <td>Retourne un <code>JSONObject</code>. Ex: <pre><code>for (JSONObject p : pieces) { ... }</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>GameState.removePiece(pieceName, x, y)</code></td>
                            <td>Supprime un pion.</td>
                            <td>Utilis√© apr√®s destruction. Ex: <pre><code>pieces.removeIf(p -> ...);</code></pre></td>
                        </tr>
                        <tr>
                            <td><code>BoardInitializer</code></td>
                            <td>Initialise le plateau.</td>
                            <td>Lit <code>pions.txt</code>. Ex: <pre><code>BufferedReader reader = new BufferedReader(...);</code></pre></td>
                        </tr>
                    </tbody>
                </table>

                <h3 class="h5 mb-3">R√®gles des Pions üé≤</h3>
                <p>Les r√®gles sont centralis√©es dans des impl√©mentations de <code>PieceRules</code>. Voici un r√©sum√© :</p>
                <ul>
                    <li><strong>Tourelle</strong>: D√©placement unique n‚Äôimporte o√π, puis bloqu√©.</li>
                    <li><strong>Sniper</strong>: Bouge 1 case (haut/bas/gauche/droite), action <code>attack</code> (1 d√©g√¢t √† distance).</li>
                    <li><strong>Bouclier</strong>: Bouge 1 case, action <code>shield</code> (ajoute 1 bouclier temporaire de 2 tours).</li>
                    <li><strong>Kamikaze</strong>: Bouge 1 case, action <code>attack</code> (2 d√©g√¢ts ou r√©duit le bouclier √† 0, se d√©truit).</li>
                    <li><strong>Mur</strong>: Bouge 1 case, action <code>deploy</code> (cr√©e une ligne horizontale de 3 murs, devient immobile).</li>
                    <li><strong>Soldat</strong>: Bouge 1 case vers l‚Äôavant (y+1), 2 cases au premier tour.</li>
                </ul>
            </div>
        </article>

        <section id="blog">
            <h2 class="mb-4">Journal de d√©veloppement</h2>

            <section id="blog" class="timeline">
                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">‚öîÔ∏è Lancement de Brawl Chess : Client Love2D et Serveur Java</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 01 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le projet Brawl Chess a d√©but√© avec la mise en place d‚Äôun client Love2D et d‚Äôun serveur Java
                            pour un jeu de combat tactique. L‚Äôobjectif √©tait de cr√©er une base solide pour un syst√®me
                            tour par tour avec des pions personnalis√©s.
                        </p>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Le client, d√©velopp√© avec Lua via Love2D, inclut une interface simple pour afficher un
                            plateau de jeu 8x8 et g√©rer les interactions. Voici un extrait de <code>combat.lua</code>
                            pour initialiser le plateau :
                        </p>

                        <pre><code>function combat.load()
                    for i = 1, boardSize do
                        board[i] = {}
                        for j = 1, boardSize do
                            board[i][j] = nil
                        end
                    end
                end</code></pre>

                        <p>
                            L‚Äôinterface comprend :
                        </p>
                        <ul>
                            <li>Un plateau 8x8 avec des cases altern√©es blanc/gris</li>
                            <li>Un syst√®me de s√©lection au clic pour d√©placer les pions</li>
                            <li>Un affichage des stats (HP, bouclier) pour chaque pion</li>
                        </ul>

                        <h6>üß† C√¥t√© serveur (Java)</h6>
                        <p>
                            Le serveur, √©crit en Java, g√®re l‚Äô√©tat du jeu et les requ√™tes TCP. Il initialise un plateau
                            avec des pions depuis un fichier <code>pions.txt</code> et valide les mouvements.
                        </p>

                        <pre><code>BoardInitializer.initializeBoard(board, gameState);</code></pre>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Base pour un jeu tour par tour multijoueur</li>
                            <li>Possibilit√© d‚Äôajouter des r√®gles complexes pour les pions</li>
                            <li>√âvolution vers une gestion centralis√©e des donn√©es</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üéÆ Ajout des R√®gles de Combat dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 02 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons enrichi Brawl Chess avec des r√®gles sp√©cifiques pour les mouvements et actions
                            des pions, rendant le combat plus strat√©gique.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Les r√®gles ont √©t√© int√©gr√©es dans <code>Board.java</code> et
                            <code>ActionHandler.java</code>. Par exemple, le Sniper peut attaquer une case ennemie :
                        </p>

                        <pre><code>if (pieceName.equals("Sniper") && action.equals("attack")) {
                    if (targetPiece != null && targetPiece.getString("type").equals("enemy")) {
                        targetPiece.put("hp", targetPiece.getInt("hp") - 1);
                        piece.put("hasUsedAction", true);
                    }
                }</code></pre>

                        <p>
                            Les pions comme la Tourelle ou le Kamikaze ont des comportements uniques (ex. attaque
                            unique, autodestruction).
                        </p>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Le client a √©t√© mis √† jour pour refl√©ter ces actions dans <code>combat.lua</code>, avec un
                            clic droit pour choisir des actions :
                        </p>

                        <pre><code>function combat.mousepressed(x, y, button)
                    if button == 2 then
                        for _, piece in ipairs(playerPieces) do
                            if piece.x == boardCol and piece.y == boardRow then
                                if piece.name == "Sniper" then
                                    actionMode = "attack"
                                end
                            end
                        end
                    end
                end</code></pre>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Diversit√© strat√©gique avec des pions sp√©cialis√©s</li>
                            <li>Base pour une IA ennemie</li>
                            <li>Possibilit√© d‚Äôajouter des animations</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üîÑ Syst√®me de Tours pour Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 04 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons impl√©ment√© un syst√®me de tours altern√©s entre joueur et ennemi, avec une
                            transition visible pour am√©liorer l‚Äôexp√©rience.
                        </p>

                        <h6>üß† C√¥t√© serveur (Java)</h6>
                        <p>
                            Une nouvelle classe <code>TurnManager.java</code> g√®re les tours, et
                            <code>GameServer.java</code> valide les actions selon le tour actuel :
                        </p>

                        <pre><code>public class TurnManager {
                    private String currentTurn = "player";
                
                    public void switchTurn() {
                        currentTurn = currentTurn.equals("player") ? "enemy" : "player";
                    }
                }</code></pre>

                        <p>
                            L‚Äôennemi passe automatiquement son tour pour simplifier l‚ÄôIA.
                        </p>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Le client affiche le tour actuel et bloque les actions pendant le tour de l‚Äôennemi avec un
                            timer dans <code>combat.lua</code> :
                        </p>

                        <pre><code>function combat.update(dt)
                    if currentTurn == "enemy" and enemyTurnTimer > 0 then
                        enemyTurnTimer = enemyTurnTimer - dt
                        if enemyTurnTimer <= 0 then
                            combat.sendEndEnemyTurn()
                        end
                    end
                end</code></pre>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Structure claire pour un jeu multijoueur</li>
                            <li>Possibilit√© d‚Äôajouter une IA ennemie active</li>
                            <li>Am√©lioration visuelle des transitions</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üìã Centralisation des R√®gles dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 06 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Pour faciliter les modifications, nous avons centralis√© les r√®gles de mouvements et actions
                            dans un nouveau fichier <code>PieceRules.java</code>.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            <code>PieceRules.java</code> contient les validations des d√©placements, comme pour le Sniper
                            :
                        </p>

                        <pre><code>if (pieceName.equals("Sniper")) {
                    if (piece.getBoolean("hasUsedAction")) {
                        return false;
                    }
                    int dx = Math.abs(targetX - currentX);
                    int dy = Math.abs(targetY - currentY);
                    return (dx == 1 && dy == 0) || (dx == 0 && dy == 1);
                }</code></pre>

                        <p>
                            Les actions (ex. attaque du Kamikaze) sont aussi g√©r√©es ici, rendant le code modulaire.
                        </p>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Aucune modification c√¥t√© client, car les r√®gles sont appliqu√©es par le serveur.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Facilit√© √† ajouter de nouveaux pions</li>
                            <li>Maintenance simplifi√©e des r√®gles</li>
                            <li>Pr√©paration pour une IA ou des variantes</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üìÇ Organisation des Fichiers dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 07 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Pour am√©liorer la structure du projet, nous avons r√©organis√© les fichiers Lua et optimis√© la navigation dans le code.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Les fichiers Lua principaux ont √©t√© d√©plac√©s dans des sous-dossiers logiques sous <code>src/</code> :
                        </p>
                        <ul>
                            <li><code>board.lua</code> ‚Üí <code>src/board/</code></li>
                            <li><code>input.lua</code> ‚Üí <code>src/input/</code></li>
                            <li><code>network.lua</code> ‚Üí <code>src/network/</code></li>
                            <li><code>pieces.lua</code> ‚Üí <code>src/pieces/</code></li>
                            <li><code>render.lua</code> ‚Üí <code>src/render/</code></li>
                            <li><code>turn.lua</code> ‚Üí <code>src/turn/</code></li>
                        </ul>
                        <p>
                            <code>combat.lua</code> a √©galement √©t√© d√©plac√© dans <code>src/combat/</code>, et les <code>require</code> ont √©t√© mis √† jour pour refl√©ter les nouveaux chemins, par exemple :
                        </p>
                        <pre><code>combat.board = require("src.board.board")</code></pre>

                        <p>
                            Le dossier <code>assets/</code> a √©t√© structur√© avec des sous-dossiers comme <code>assets/images/</code> et <code>assets/fonts/</code>.
                        </p>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Cette organisation rend le projet plus modulaire et pr√™t √† accueillir de nouvelles fonctionnalit√©s.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Facilit√© d‚Äôajout de nouveaux modules</li>
                            <li>Meilleure collaboration avec d‚Äôautres d√©veloppeurs</li>
                            <li>Pr√©paration pour des tests unitaires</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üèÜ Cr√©ation d‚Äôun Menu Classement dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 08 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons ajout√© un menu de classement pour afficher les meilleurs joueurs, avec un design visuel inspir√© d‚Äôun th√®me m√©di√©val.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Le fichier <code>views/leaderboard.lua</code> a √©t√© cr√©√© pour afficher un tableau de classement avec les colonnes "Rang", "Pseudo", et "Score". Voici un extrait du rendu :
                        </p>
                        <pre><code>love.graphics.setColor(headerColor)
                love.graphics.rectangle("fill", tableX, tableY, tableWidth, headerHeight)
                love.graphics.setColor(1, 1, 1)
                love.graphics.printf("Rang", tableX, tableY + 10, 80, "center")</code></pre>

                        <p>
                            Des am√©liorations visuelles ont √©t√© ajout√©es :
                        </p>
                        <ul>
                            <li>Lignes altern√©es en beige clair et fonc√© pour une meilleure lisibilit√©.</li>
                            <li>S√©parations verticales entre les colonnes.</li>
                            <li>Effet de survol avec un surlignage dor√©.</li>
                        </ul>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Les joueurs peuvent maintenant consulter un classement, m√™me si les donn√©es sont simul√©es pour l‚Äôinstant.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Affichage des scores r√©els via le serveur</li>
                            <li>Possibilit√© d‚Äôajouter des avatars ou des ic√¥nes</li>
                            <li>Pr√©paration pour un syst√®me de pagination</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üåê Donn√©es Dynamiques pour le Classement</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 09 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le classement affiche maintenant des donn√©es dynamiques r√©cup√©r√©es depuis le serveur, avec un fallback sur des donn√©es locales en cas d‚Äô√©chec.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Nous avons ajout√© une fonction <code>fetchLeaderboard</code> dans <code>src/network/network.lua</code> pour r√©cup√©rer les scores :
                        </p>
                        <pre><code>function network.fetchLeaderboard()
                    local request = { type = "leaderboard" }
                    local requestJson = json.encode(request)
                    -- ... (envoi et r√©ception via socket)
                    return true, response.scores or {}
                end</code></pre>

                        <p>
                            Dans <code>views/leaderboard.lua</code>, les scores sont charg√©s dynamiquement :
                        </p>
                        <pre><code>local success, data = combat.network.fetchLeaderboard()
                if success then
                    scores = data
                else
                    scores = { { rank = 1, name = "GrokMaster", score = 1500 }, ... }
                end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le classement refl√®te maintenant les donn√©es du serveur, rendant le jeu plus interactif et pr√™t pour un mode multijoueur.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Mise √† jour des scores apr√®s chaque partie</li>
                            <li>Affichage du joueur actuel dans le classement</li>
                            <li>Possibilit√© d‚Äôajouter des filtres ou une pagination</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üèÅ Finalisation de la Structure de Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 10 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons finalis√© l‚Äôorganisation des fichiers Lua pour une structure claire et maintenable.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Les derniers ajustements incluent :
                        </p>
                        <ul>
                            <li>D√©placement de <code>combat.lua</code> dans <code>src/combat/</code>.</li>
                            <li>Organisation des ressources dans <code>assets/</code> avec des sous-dossiers comme <code>images/</code> et <code>fonts/</code>.</li>
                            <li>Ajout de commentaires dans <code>views/</code> pour clarifier le r√¥le de chaque fichier.</li>
                        </ul>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le projet est maintenant bien structur√©, facilitant les ajouts futurs et la collaboration avec d‚Äôautres d√©veloppeurs.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Ajout facile de nouvelles fonctionnalit√©s (ex. animations, IA)</li>
                            <li>Possibilit√© de mettre en place des tests unitaires</li>
                            <li>Pr√©paration pour une version multijoueur compl√®te</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üé® Ajout des Sprites PNG pour les Pions dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 11 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons enrichi l‚Äôexp√©rience visuelle en ajoutant des sprites PNG uniques pour chaque pion, diff√©renciant les alli√©s et les ennemis.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Les fichiers <code>pieces.lua</code> et <code>render.lua</code> ont √©t√© mis √† jour pour int√©grer les sprites :
                        </p>
                        <ul>
                            <li><code>pieces.lua</code> charge les images avec <code>pieces.loadSprites()</code> et assigne un sprite √† chaque pion via <code>pieces.assignSprite()</code> selon le nommage <code>blue_sprite_1.png</code> √† <code>blue_sprite_14.png</code> pour les alli√©s, et <code>red_sprite_1.png</code> √† <code>red_sprite_14.png</code> pour les ennemis.</li>
                            <li><code>render.lua</code> remplace les rectangles color√©s par les sprites, avec un redimensionnement automatique pour s‚Äôadapter √† la taille des tuiles.</li>
                        </ul>
                        <p>
                            Dans <code>combat.lua</code>, les sprites sont charg√©s au d√©marrage et assign√©s apr√®s la r√©cup√©ration des donn√©es du serveur :
                        </p>
                        <pre><code>function combat.load()
                    combat.pieces.loadSprites()
                    -- ...
                end

                function combat.enterCombat()
                    -- ... (r√©cup√©ration des pions)
                    for _, piece in ipairs(combat.playerPieces) do
                        combat.pieces.assignSprite(piece, false)
                    end
                    for _, piece in ipairs(combat.enemyPieces) do
                        combat.pieces.assignSprite(piece, true)
                    end
                end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Les pions sont maintenant repr√©sent√©s par des images personnalis√©es, am√©liorant l‚Äôesth√©tique et la diff√©renciation entre alli√©s (bleus) et ennemis (rouges).
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Possibilit√© d‚Äôajouter des animations pour les pions</li>
                            <li>Personnalisation visuelle selon les joueurs</li>
                            <li>Pr√©paration pour des effets visuels (ex. explosion du Kamikaze)</li>
                        </ul>
                        <div class="text-center mb-3">
                            <a href="#" onclick="showImageInModal('../images/fond2d-test.png'); return false;">
                                <img src="../images/pieces_sprite.png" class="img-fluid rounded border"
                                    alt="Test fond 2D">
                            </a>
                        </div>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üë§ Ajout d‚Äôun Avatar Rond dans le Menu</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 12 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Nous avons ajout√© un avatar circulaire dans le menu principal, utilisant un PNG carr√© masqu√© pour un rendu rond.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>menu.lua</code>, l‚Äôavatar est charg√© depuis <code>assets/images/avatar.png</code> et affich√© avec un masque circulaire via <code>love.graphics.stencil</code> :
                        </p>
                        <pre><code>love.graphics.stencil(function()
                    love.graphics.circle("fill", 35, 35, 25)
                end, "replace", 1)
                love.graphics.setStencilTest("greater", 0)
                love.graphics.draw(menu.avatarImage, 10, 10, 0, 50 / menu.avatarImage:getWidth(), 50 / menu.avatarImage:getHeight())</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            L‚Äôavatar est maintenant rond, ajoutant une touche personnelle au menu principal.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Personnalisation de l‚Äôavatar par les joueurs</li>
                            <li>Ajout d‚Äôun cadre ou d‚Äôeffets autour de l‚Äôavatar</li>
                            <li>Int√©gration d‚Äôun niveau ou d‚Äôun rang visuel</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üìä Stylisation et Animation de la Barre d‚ÄôXP</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 13 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            La barre d‚ÄôXP a √©t√© stylis√©e avec un design m√©di√©val et une animation de remplissage fluide.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>menu.lua</code>, la barre a un fond parchemin, un d√©grad√© vert √† dor√©, et des ornements aux coins. Une animation la remplit sur 2 secondes :
                        </p>
                        <pre><code>local progressWidth = barWidth * xpProgress
                for x = 0, progressWidth - 1 do
                    local t = x / barWidth
                    love.graphics.setColor(0, 1 - t, t)
                    love.graphics.rectangle("fill", barX + x, barY, 1, barHeight, 5, 5)
                end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            La barre d‚ÄôXP est plus immersive et dynamique, renfor√ßant le th√®me m√©di√©val du jeu.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Affichage du niveau ou d‚Äôun pourcentage</li>
                            <li>Effets visuels lors des gains d‚ÄôXP</li>
                            <li>Personnalisation des couleurs selon le joueur</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">‚ôüÔ∏è Remplacement de l‚Äô√âchiquier par une Image dans le Menu Combat</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 14 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            L‚Äô√©chiquier dessin√© dans le menu combat a √©t√© remplac√© par <code>board/board.png</code>, avec ajustements de taille.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>combat_menu.lua</code>, l‚Äôimage est charg√©e et redimensionn√©e √† 280x280 pixels pour mieux s‚Äôint√©grer :
                        </p>
                        <pre><code>local boardSize = 280
                local scale = boardSize / combat_menu.boardImage:getWidth()
                love.graphics.draw(combat_menu.boardImage, boardX, boardY, 0, scale, scale)</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            L‚Äô√©chiquier est plus esth√©tique et coh√©rent avec le style visuel global.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Ajout d‚Äôeffets visuels sur le plateau (ex. survol)</li>
                            <li>Utilisation de diff√©rentes textures selon le th√®me</li>
                            <li>Optimisation avec un atlas de sprites</li>
                        </ul>
                        <div class="text-center mb-3">
                            <a href="#" onclick="showImageInModal('../images/fond2d-test.png'); return false;">
                                <img src="../images/menu_combat.png" class="img-fluid rounded border"
                                    alt="Menu combat">
                            </a>
                        </div>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">‚ôú Remplacement du Plateau Dessin√© par une Image dans le Mode Combat</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 15 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le plateau dessin√© dans le mode combat a √©t√© remplac√© par <code>board/board.png</code>, redimensionn√© dynamiquement.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>render.lua</code>, l‚Äôimage est charg√©e et ajust√©e √† la taille du plateau :
                        </p>
                        <pre><code>local totalSize = boardSize * tileSize
                local scale = totalSize / boardImage:getWidth()
                love.graphics.draw(boardImage, boardX, boardY, 0, scale, scale)</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le plateau est d√©sormais plus visuel et uniforme avec le reste du jeu.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Personnalisation des plateaux selon les modes</li>
                            <li>Ajout d‚Äôeffets visuels (ex. ombres, animations)</li>
                            <li>Optimisation des performances avec un atlas</li>
                        </ul>
                        <div class="text-center mb-3">
                            <a href="#" onclick="showImageInModal('../images/fond2d-test.png'); return false;">
                                <img src="../images/fight.png" class="img-fluid rounded border"
                                    alt="Fight">
                            </a>
                        </div>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üéØ Ajout du Sniper dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 21 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le pion Sniper a √©t√© ajout√©, avec un mouvement d‚Äôune case dans les quatre directions et une action d‚Äôattaque √† distance infligeant 1 d√©g√¢t.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Dans <code>SniperRules.java</code>, la logique de mouvement et d‚Äôattaque a √©t√© impl√©ment√©e :
                        </p>
                        <pre><code>if (piece.getBoolean("hasUsedAction")) {
    return false;
}
int dx = Math.abs(targetX - currentX);
int dy = Math.abs(targetY - currentY);
return (dx == 1 && dy == 0) || (dx == 0 && dy == 1);</code></pre>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Le client g√®re l‚Äôaction via <code>actionMode</code> dans <code>combat.lua</code>.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Strat√©gies √† distance</li>
                            <li>Possibilit√© d‚Äôajouter des port√©es variables</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üéØ Ajout du Mode Action dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 21 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Un mode action a √©t√© introduit pour g√©rer les actions des pions de mani√®re plus intuitive.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>combat.lua</code>, <code>actionMode</code> est activ√© avec un clic droit :
                        </p>
                        <pre><code>if button == 2 then
    actionMode = "attack"
end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Les actions sont plus accessibles pour les joueurs.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Ajout d‚Äôun bouton d‚Äôaction d√©di√©</li>
                            <li>Personnalisation des actions</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üéØ Ajout du Kamikaze dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 22 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le pion Kamikaze a √©t√© ajout√©, avec un mouvement d‚Äôune case et une attaque infligeant 2 d√©g√¢ts ou d√©truisant un bouclier, suivi de sa propre destruction.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Dans <code>KamikazeRules.java</code> :
                        </p>
                        <pre><code>if ("attack".equals(action)) {
    if (targetPiece.has("shield") && targetPiece.getInt("shield") > 0) {
        targetPiece.put("shield", 0);
    } else {
        targetPiece.put("hp", targetPiece.getInt("hp") - 2);
    }
    gameState.removePiece(piece.getString("name"), piece.getInt("x"), piece.getInt("y"));
}</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le Kamikaze offre une strat√©gie sacrificielle.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Effets visuels d‚Äôexplosion</li>
                            <li>Variations d‚Äôattaque</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üõ°Ô∏è Ajout et Application du Bouclier dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 24 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le pion Bouclier a √©t√© impl√©ment√© pour ajouter un bouclier temporaire absorbant 1 d√©g√¢t pendant 2 tours.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Dans <code>BouclierRules.java</code> :
                        </p>
                        <pre><code>if ("shield".equals(action)) {
    JSONObject targetPiece = gameState.findPiece(targetX, targetY);
    if (targetPiece != null && targetPiece.getString("team").equals(piece.getString("team"))) {
        targetPiece.put("shield", 1);
        targetPiece.put("shieldTurns", 2);
        piece.put("hasUsedAction", true);
    }
}</code></pre>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>render.lua</code>, un cercle bleu indique le bouclier :
                        </p>
                        <pre><code>if piece.shield and piece.shield > 0 then
    love.graphics.setColor(0, 0, 1, 0.5)
    love.graphics.circle("line", boardX + (piece.x-1) * tileSize + tileSize / 2, boardY + (piece.y-1) * tileSize + tileSize / 2, tileSize / 2)
end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le Bouclier renforce les strat√©gies d√©fensives.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Boucliers √† dur√©e variable</li>
                            <li>Effets visuels d‚Äôexpiration</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üõ°Ô∏è Introduction du Pion Mur dans Brawl Chess</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 24 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le pion Mur a √©t√© ajout√©, permettant un d√©placement d‚Äôune case et un d√©ploiement d‚Äôune ligne horizontale de 3 murs, apr√®s quoi il devient immobile.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Dans <code>WallRules.java</code> :
                        </p>
                        <pre><code>if ("deploy".equals(action)) {
    int leftX = targetX - 1;
    int leftY = targetY;
    if (leftX >= 0 && leftX < 8 && board[leftX][leftY] == null) wallPositions.add(new int[]{leftX, leftY});
    // Ajoute centre et droite de mani√®re similaire
}</code></pre>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>render.lua</code>, les murs sont dessin√©s comme des rectangles jaunes :
                        </p>
                        <pre><code>if piece.type == "wall" then
    love.graphics.setColor(1, 1, 0, 1)
    love.graphics.rectangle("fill", boardX + (piece.x-1) * tileSize + 5, boardY + (piece.y-1) * tileSize + 5, tileSize - 10, tileSize - 10)
end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le Mur offre une strat√©gie d√©fensive solide.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Murs destructibles</li>
                            <li>Choix d‚Äôorientation</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üîß Refonte du Serveur avec PieceRules et PieceRulesFactory</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 20 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Une refonte du serveur a √©t√© r√©alis√©e pour une gestion modulaire des r√®gles via <code>PieceRules</code> et <code>PieceRulesFactory</code>.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            <code>PieceRules</code> d√©finit les m√©thodes :
                        </p>
                        <pre><code>public interface PieceRules {
    boolean isValidMove(JSONObject piece, int currentX, int currentY, int targetX, int targetY, String[][] board, JSONObject gameState);
    JSONObject handleAction(String action, JSONObject piece, int targetX, int targetY, JSONObject gameState, String[][] board);
}</code></pre>
                        <p>
                            <code>PieceRulesFactory</code> associe les pions :
                        </p>
                        <pre><code>rulesMap.put("Sniper", new SniperRules());
rulesMap.put("Tourelle", new TourelleRules());
rulesMap.put("Bouclier", new BouclierRules());
rulesMap.put("Kamikaze", new KamikazeRules());
rulesMap.put("Mur", new WallRules());
rulesMap.put("Soldat", new SoldatRules());</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le serveur est plus extensible et maintenable.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Nouveaux pions facilement int√©grables</li>
                            <li>Variants de r√®gles</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üñ±Ô∏è Ajout d‚Äôun Bouton d‚ÄôAction pour une Meilleure UX</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 24 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Le clic droit a √©t√© remplac√© par un bouton d‚Äôaction dans l‚Äôinterface pour une exp√©rience plus intuitive.
                        </p>

                        <h6>üîß C√¥t√© client (Love2D)</h6>
                        <p>
                            Dans <code>input.lua</code>, un bouton est ajout√© :
                        </p>
                        <pre><code>if buttonClicked("actionButton") then
    actionMode = "attack"
end</code></pre>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            L‚Äôinterface est plus conviviale.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Personnalisation des boutons</li>
                            <li>Actions multiples par bouton</li>
                        </ul>
                    </div>
                </article>

                <article class="mb-5 p-4 border rounded shadow-sm" id="latest-post">
                    <div class="blog-header d-flex justify-content-between align-items-center">
                        <h3 class="h5">üéÆ Int√©gration Compl√®te et Ajustements Finals</h3>
                        <button class="btn btn-link toggle-content">
                            <i class="fa fa-chevron-down"></i>
                        </button>
                    </div>
                    <p class="text-muted small">Publi√© le 25 mai 2025</p>

                    <div class="blog-content" style="display: none;">
                        <p>
                            Tous les √©l√©ments ont √©t√© int√©gr√©s et ajust√©s pour une exp√©rience coh√©rente, incluant toutes les pi√®ces et la refonte serveur.
                        </p>

                        <h6>üîß C√¥t√© serveur (Java)</h6>
                        <p>
                            Ajustements finaux pour √©quilibrer les interactions (ex. Sniper avec bouclier).
                        </p>

                        <h6>üéÆ C√¥t√© client (Love2D)</h6>
                        <p>
                            Interface unifi√©e avec bouton d‚Äôaction et sprites.
                        </p>

                        <h6>üéÆ Impact sur le jeu</h6>
                        <p>
                            Le jeu est maintenant complet et pr√™t pour des tests.
                        </p>

                        <h6>üî≠ Ce que √ßa ouvre</h6>
                        <ul>
                            <li>Mode multijoueur</li>
                            <li>Animations avanc√©es</li>
                            <li>Mises √† jour r√©guli√®res</li>
                        </ul>
                    </div>
                </article>
            </section>
        </section>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.28.0/prism.min.js"></script>
    <script src="../js/scripts.js"></script>
</body>

</html>